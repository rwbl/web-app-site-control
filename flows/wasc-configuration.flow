[
    {
        "id": "b5f62f16.f2a0e",
        "type": "subflow",
        "name": "datetime",
        "info": "Date & Time Functions\n\n**INPUT**\n\nNo input used.\n\n**OUTPUT**\n\nJSON Object with keys:value pairs.\n\n_Examples Payload_\n\n01-04-2020 (KW 14)\n\n{{msg.payload.date}} (KW {{msg.payload.weeknr}})\n\n\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "6ad65be3.25f664"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 40,
                "wires": [
                    {
                        "id": "6ad65be3.25f664",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "All",
                "type": "bool",
                "value": "true"
            },
            {
                "name": "Date",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "Time",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "DateTime",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "UseSeconds",
                "type": "bool",
                "value": "true"
            }
        ],
        "color": "#DDAA99",
        "status": {
            "x": 300,
            "y": 120,
            "wires": [
                {
                    "id": "6ad65be3.25f664",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6ad65be3.25f664",
        "type": "function",
        "z": "b5f62f16.f2a0e",
        "name": "Date Time",
        "func": "// Various date & time functions\nconst DEBUG = false;\n\n// Get date now and format dd-mm-yyyy\nvar getDateNow = function() {\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth()+1;\n    var yyyy = today.getFullYear();\n    if(dd<10) dd='0'+dd;\n    if(mm<10) mm='0'+mm;\n    return dd+\"-\"+mm+\"-\"+yyyy;\n} \n\n// Get date now and format YYYY-mm-dd\n// const DATENOW = getDateNowYYYYmmdd();\nvar getDateNowYYYYmmdd = function() {\n    var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth()+1;\n    var yyyy = today.getFullYear();\n    if(dd<10) dd='0'+dd;\n    if(mm<10) mm='0'+mm;\n    return yyyy + \"-\" + mm + \"-\" + dd;\n} \n\n// Get time now and format\nvar getTimeNow = function(usesecs) {\n    var today = new Date();\n    var hh = today.getHours();\n    var mm = today.getMinutes(); \n    var ss = today.getSeconds(); \n    if(hh<10) hh='0'+hh;\n    if(mm<10) mm='0'+mm;\n    if(ss<10) ss='0'+ss;\n    var result = (usesecs) ? hh + \":\" + mm + \":\" + ss : hh + \":\" + mm;\n    return result\n}\n\n// Returns the ISO week of the date from an UTC timestamp.\nvar getWeekNumber = function() {\n    var today = new Date();\n    var onejan = new Date(today.getFullYear(),0,1);\n    return Math.ceil((((today - onejan) / 86400000) + onejan.getDay()+1)/7);\n}\n\n/*\nISO 8601 week numbering.\nNew week starts on mondays.\nUsed by most European countries, most of Asia and Oceania.\n1st week contains 4-7 days of the new year\nThanks to https://github.com/commenthol/weeknumber\n*/\nvar getWeekNumber2 = function() {\n    const MINUTE = 60000\n    const DAY = 86400000\n    const WEEK = 604800000 // = 7 * 24 * 60 * 60 * 1000 = 7 days in ms\n    const tzDiff = (first, second) => (first.getTimezoneOffset() - second.getTimezoneOffset()) * MINUTE\n    const date = new Date();\n  // day 0 is monday\n  const day = (date.getDay() + 6) % 7\n  // get thursday of present week\n  const thursday = new Date(date)\n  thursday.setDate(date.getDate() - day + 3)\n  // set 1st january first\n  const firstThursday = new Date(thursday.getFullYear(), 0, 1)\n  // if Jan 1st is not a thursday...\n  if (firstThursday.getDay() !== 4) {\n    firstThursday.setMonth(0, 1 + (11 /* 4 + 7 */ - firstThursday.getDay()) % 7)\n  }\n  const weekNumber = 1 + Math.floor((thursday - firstThursday + tzDiff(firstThursday, thursday)) / WEEK)\n  return weekNumber\n}\n\nvar getDayStr = function() {\n    var now = new Date();\n    day = now.getDate();\n    dayNr = now.getDay();\n    weekDay = ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag' ];\n    return weekDay[dayNr];\n}\n\nvar getMonthStr = function() {\n    var now = new Date();\n    monthNr = now.getMonth();\n \tmonth = ['Januar','Februar','MÃ¤rz','April','Mai','Juni','Juli','August','September', 'Oktober','November','Dezember'];\n    return month[monthNr];\n}\n\n// Check if to use seconds for the time\nconst usesecs = env.get(\"UseSeconds\");\n\n// Select the option for the msg to return\nif (env.get(\"All\")) {msg.payload = {\n    \"date\":getDateNow(),\n    \"dateyyyymmdd\":getDateNowYYYYmmdd(),\n    \"time\":getTimeNow(usesecs), \n    \"timehhmm\":getTimeNow(false), \n    \"datetime\":getDateNow() + \" \" + getTimeNow(usesecs), \n    \"datetimehhmm\":getDateNow() + \" \" + getTimeNow(false), \n    \"weeknr\":getWeekNumber(), \n    \"daystr\":getDayStr(),\n    \"monthstr\":getMonthStr()}}\nif (env.get(\"Date\")) {msg.payload = getDateNow()}\nif (env.get(\"Time\")) {msg.payload = getTimeNow(usesecs)}\nif (env.get(\"DateTime\")) {msg.payload = getDateNow() + \" \" + getTimeNow(usesecs)}\n\n// Debug\nif (DEBUG) node.warn(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "74408cff.bfb754",
        "type": "tab",
        "label": "WASC-Configuration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fbcf40d1.60945",
        "type": "inject",
        "z": "74408cff.bfb754",
        "name": "Inject Globals",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "1b7ec981.4f7b66"
            ]
        ]
    },
    {
        "id": "b2feee56.0b2f7",
        "type": "comment",
        "z": "74408cff.bfb754",
        "name": "WASC Configuration",
        "info": "Web App Site Control (WASC)\nWeb based GUI, using Node-RED, to control a Domoticz Home Automation System with connected hardware.\n\nConfiguration\n\n### Global Context\ndomip = Set the IP address of the Domoticz system\ndebug = Set debug on (true) or off (false)\nversion = Set the date YYYYMMDD of the last change\n\nThe function node is only used to show the status of the global context.\nChange values in the Inject nodes.\n\nThe debug flag is set to false. Click on the Inject DEBUG True node to turn debug on. Then refresh the various flows or wait for a refresh.\n\n### Style\nEach tab has its own style setting in a ui_template.\nSample for Tab Heizing\n`<style>\n#Heizung_Heizung_cards {\n    font-size: 20px !important;\n    background-color: \"#FF0000\" !important;\n}\n</style>\n`",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "b582b150.ca93",
        "type": "ui_template",
        "z": "74408cff.bfb754",
        "d": true,
        "group": "",
        "name": "Master style override",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n/*\nbody.nr-dashboard-theme {\n background-color: #333333;\n font-family: Calibri;\n}\nbutton, html, input, select, textarea {\n font-family: Calibri;\n}\nbody.nr-dashboard-theme md-content md-card {\n background-color: #33333300;\n color: #d0d0d0;\n}\n\nbody.nr-dashboard-theme md-toolbar {\n background-image: linear-gradient(to right, #404040, #737373);\n box-shadow: 0px 1px 20px #0000008a;\n}\n.nr-dashboard-theme ui-card-panel {\n background-image: linear-gradient(to bottom right, #404040, #737373);\n border: 1px solid #555555;\n box-shadow: 0 0 20px #00000066;\n}\n\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n color: #2eb82e;\n text-shadow: 0 0 2px black;\n}\n\n.nr-dashboard-theme .nr-dashboard-form-button {\n background-image: linear-gradient(to bottom right, #8a8a8a6e, #00000070);\n background-color: #00ad03;\n color: #d0d0d0;\n text-shadow: 0 0 2px #525252;\n border-radius:6px;\n}\n\n.nr-dashboard-theme .nr-dashboard-button .md-button {\n background-image: linear-gradient(to bottom right, #8a8a8a6e, #00000070);\n background-color: #00ad03;\n color: #d0d0d0;\n text-shadow: 0 0 2px #525252;\n border-radius:6px;\n}\n.nr-dashboard-theme .nr-dashboard-button .md-button:hover {\n background-color: #00de00;\n}\n\n.nr-dashboard-theme .nr-dashboard-switch md-switch .md-thumb {\n background-image: linear-gradient(to bottom right, #48b349, #115009);\n}\n.nr-dashboard-button .md-button {\n box-shadow: 0 1px 3px 0 rgba(0,0,0,.26)!important;\n width: 100%!important;\n height: 100%!important;\n margin: 0!important;\n min-width: 0!important;\n min-height: 0!important;\n}\n.nr-dashboard-theme .nr-dashboard-slider .md-thumb:after {\n background-image: linear-gradient(to bottom right, #48b349, #115009);\n border-style: none;\n}\n.nr-dashboard-theme .nr-dashboard-numeric .value {\n background-color: #33333300;\n color:#d0d0d0;\n}\n\n.nr-dashboard-numeric .value {\n font-weight: 700;\n text-align: center;\n border: 0;\n}\n\n\n.nr-dashboard-form {\n display: inline-block;\n width: 100%;\n overflow-y: visible;\n}\n#SETTINGS_TEATED_cards {\n min-height: 260px;\n}\n*/\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "global",
        "x": 120,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "800ff059.924ca",
        "type": "change",
        "z": "74408cff.bfb754",
        "name": "Set debug",
        "rules": [
            {
                "t": "set",
                "p": "debug",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 160,
        "wires": [
            [
                "1ef23907.241aa7"
            ]
        ]
    },
    {
        "id": "caf1c657.da44a8",
        "type": "inject",
        "z": "74408cff.bfb754",
        "name": "Inject DEBUG False",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "800ff059.924ca"
            ]
        ]
    },
    {
        "id": "877930dd.1eb21",
        "type": "inject",
        "z": "74408cff.bfb754",
        "name": "Inject DEBUG True",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 200,
        "wires": [
            [
                "800ff059.924ca"
            ]
        ]
    },
    {
        "id": "3ebdedf8.b7bde2",
        "type": "change",
        "z": "74408cff.bfb754",
        "name": "Set Version",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "1ef23907.241aa7"
            ]
        ]
    },
    {
        "id": "9a89480f.50b858",
        "type": "inject",
        "z": "74408cff.bfb754",
        "name": "Inject Version",
        "topic": "",
        "payload": "v20200417",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "3ebdedf8.b7bde2"
            ]
        ]
    },
    {
        "id": "96361aa2.4f88e8",
        "type": "comment",
        "z": "74408cff.bfb754",
        "name": "WASC TODO",
        "info": "ToDos\nAt regular interval get the all devices status via HTTP API request. Store the payload in a global context to be used by other flows.\nQuestion:\nHow to trigger updating other flows if the all devices status gets updated.",
        "x": 90,
        "y": 440,
        "wires": []
    },
    {
        "id": "1ef23907.241aa7",
        "type": "function",
        "z": "74408cff.bfb754",
        "name": "Global Context Status",
        "func": "// Show the global context as node status\nconst INFO = global.get(\"domip\") + \",\" +\n             global.get(\"ccuip\") + \",\" +\n             global.get(\"hueip\") + \",\" +\n             global.get(\"hueusername\") + \",\" +\n             global.get(\"debug\") + \",\" +\n             global.get(\"version\");\n\n// node.status({text:INFO});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1b7ec981.4f7b66",
        "type": "change",
        "z": "74408cff.bfb754",
        "name": "Set Globals",
        "rules": [
            {
                "t": "set",
                "p": "hueip",
                "pt": "global",
                "to": "http://hueip",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "hueusername",
                "pt": "global",
                "to": "hueusername",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "domip",
                "pt": "global",
                "to": "http://127.0.0.1:8080",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ccuip",
                "pt": "global",
                "to": "http://ccuip",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "notificationemail",
                "pt": "global",
                "to": "email@address",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "location",
                "pt": "global",
                "to": "{\"lat\": 53.63647,\"lon\": 9.798251}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "vzip",
                "pt": "global",
                "to": "http://vzip",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 120,
        "wires": [
            [
                "1ef23907.241aa7"
            ]
        ]
    },
    {
        "id": "2d855b66.5f3354",
        "type": "comment",
        "z": "74408cff.bfb754",
        "name": "WASC Clock",
        "info": "The clock is updated every minute and sets datetime properties.\nInstaed of defining several function nodes with date & time function, the global context \"clock\" can be used.\n\nUse property examples:\n\n - var datetime = global.get(\"clock\").datetime;\n - msg.payload.datetime\n",
        "x": 90,
        "y": 280,
        "wires": []
    },
    {
        "id": "35d34fa8.396eb",
        "type": "inject",
        "z": "74408cff.bfb754",
        "name": "Start Clock",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 110,
        "y": 320,
        "wires": [
            [
                "4866e8b9.260518"
            ]
        ]
    },
    {
        "id": "4866e8b9.260518",
        "type": "subflow:b5f62f16.f2a0e",
        "z": "74408cff.bfb754",
        "name": "Set datetime object",
        "env": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "13166158.9894af"
            ]
        ]
    },
    {
        "id": "13166158.9894af",
        "type": "change",
        "z": "74408cff.bfb754",
        "name": "Set global.clock",
        "rules": [
            {
                "t": "set",
                "p": "clock",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    }
]