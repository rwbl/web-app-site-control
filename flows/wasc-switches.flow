[
    {
        "id": "aca7a4e9.b87e18",
        "type": "subflow",
        "name": "rmdev dp val",
        "info": "Get RaspMatic Device Datapoints or a selected Datapoint.\n\n**INPUT**\n\n**TOPIC**\n\nThe Device Datapoint.\n\n**PAYLOAD**\n\nLeave empty to get all datapoints or define a CSV string with datapoint types (i.e. LOW_BAT,STATE).\n\n_HINT_\nThe device datapoint can be obtained by using the XML-API script statelist.\n\nExample:\n`http://ccu-ip/addons/xmlapi/statelist.cgi`.\n\nThe device datapoint is then used to get its associated datapoints.\nExample URL XML-API request for the device with id 1541:\n`http://ccu-ip/addons/xmlapi/state.cgi?device_id=1541`.\n\n**OUTPUT**\n\nThe device datapoints. Either all or selected as given by the input payload.\n\nA datapoint can be selected from the msg.payload by its key. Example: \n`msg.payload.STATE, msg.payload.LOW_BAT`.\n\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "1074766a.e1a132"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 40,
                "wires": [
                    {
                        "id": "f8c6f79a.67fc88",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#4ee44e"
    },
    {
        "id": "1074766a.e1a132",
        "type": "function",
        "z": "aca7a4e9.b87e18",
        "name": "Set URL Device State",
        "func": "// set the url xml-api to get the state for a device\nconst DEBUG = global.get(\"debug\");\n//const DEBUG = true;\n\n// The msg.topic holds the device datapoint\nconst deviceid = msg.topic;\n\n// The msg.payload defines optional device datapoints\n// Set as flow context because used by the function getting the datapoints\n// If left blank all datapoints are returned\nflow.set(\"datapoints\",msg.payload);\n\n// ccuip/addons/xmlapi/state.cgi?device_id=1541\nmsg.url = global.get(\"ccuip\") + \"/addons/xmlapi/state.cgi?device_id=\" + deviceid;\nif (DEBUG === true) node.warn(msg.url);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 100,
        "wires": [
            [
                "a00f1e2b.675018"
            ]
        ]
    },
    {
        "id": "a00f1e2b.675018",
        "type": "http request",
        "z": "aca7a4e9.b87e18",
        "name": "Request Device State",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 280,
        "y": 160,
        "wires": [
            [
                "5807294c.fb27a8"
            ]
        ]
    },
    {
        "id": "5807294c.fb27a8",
        "type": "function",
        "z": "aca7a4e9.b87e18",
        "name": "Correct Datapoints",
        "func": "// Correct strings in the datapoints XML response.\nvar statelist = msg.payload;\n\n// \"\"\"\" to be replaced to \"\"\nstatelist.replace(\"\\\"\\\"\",\"\");\n// Assign the corrected statelist\nmsg.payload = statelist;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "ed3d988a.29356"
            ]
        ]
    },
    {
        "id": "ed3d988a.29356",
        "type": "xml",
        "z": "aca7a4e9.b87e18",
        "name": "Convert XML",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "f8c6f79a.67fc88"
            ]
        ]
    },
    {
        "id": "f8c6f79a.67fc88",
        "type": "function",
        "z": "aca7a4e9.b87e18",
        "name": "Set Datapoints",
        "func": "// Get all device or selected datapoints depending flow context \"datapoints\".\n// If empty all datapoints are returned else the datapoints as defined as CVS with their type.\n// Types examples are LOW_BAT, STATE\n// The msg returns a json object with datapoints TYPE:VALUE:\n// {STATE:\"1\", LOW_BAT:\"false\", ...}\n// Get a datapoint from the payload, i.e. msg.payload.STATE which gives \"1\"\nconst DEBUG = global.get(\"debug\");\n// const DEBUG = true;\n\n// define the JSON object1rray with the datapoints\n// {ISE_ID:\"NNNN\", STATE:\"false\" ...}, \nvar devicedatapoints = {};\n\n// Get all datapoints\nfunction getDatapoints(devicechannels){\n    var result = {};\n    // loop over the devicechannels datapoints\n    devicechannels.forEach(function(channel) {\n        // get the datapoints\n        datapoints = channel.datapoint;\n        if (datapoints !== undefined) {\n            // if (DEBUG) node.warn(\"Channel datapoints=\" + datapoints.length);   //\"Channel datapoints=8\"\n            // get the channel datapoints\n            datapoints.forEach(function(datapoint){\n                devicedatapoints[datapoint.$.type] = datapoint.$.value;\n                if (DEBUG) node.warn(\"Datapoint=\" + datapoint.$.ise_id + \":\" + datapoint.$.type + \"=\" + datapoint.$.value);\n            });\n        }\n    });\n    return result;\n}\n\n// get the datapoint value and set the topic & flow context datapoint type to the datapoint ise_id\nfunction getDatapointValue(devicechannels,datapointtype){\n    var result = {};\n    // loop over the devicechannels datapoints\n    devicechannels.forEach(function(channel) {\n        // get the datapoints\n        datapoints = channel.datapoint;\n        if (datapoints !== undefined) {\n            // if (DEBUG) node.warn(\"Channel datapoints=\" + datapoints.length);   //\"Channel datapoints=8\"\n            // get the channel datapoints\n            datapoints.forEach(function(datapoint){\n                if (datapoint.$.type == datapointtype.toUpperCase()) {\n                    devicedatapoints[datapoint.$.type] = datapoint.$.value;\n                    if (DEBUG) node.warn(\"Datapoint=\" + datapoint.$.ise_id + \":\" + datapoint.$.type + \"=\" + datapoint.$.value);\n                }\n            });\n        }\n    });\n    return result;\n}\n\n// get the single device channels from xml into json format\ndevicechannels = msg.payload.state.device[0].channel;\ndevicename = msg.payload.state.device[0].$.name;\nif (DEBUG) node.warn(\"Device \" + devicename + \", channels=\" + devicechannels.length);   //\"Device channels=8\"\n// if (DEBUG) node.warn(devicechannels);   //8 objects\n\n// Check the flow context datapoints\n// split the flow context \"datapoints\" in an array\nif (DEBUG) node.warn(\"Search Datapoints:\" + flow.get(\"datapoints\"));\nif (flow.get(\"datapoints\") === \"\") {\n    getDatapoints(devicechannels);\n}\nelse {\n    searchdatapoints = flow.get(\"datapoints\").split(\",\");\n    searchdatapoints.forEach(function(datapoint){\n        getDatapointValue(devicechannels,datapoint);\n    });\n}\n\nmsg.payload = devicedatapoints;\nif (DEBUG) node.warn(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ff641d00.e7b03",
        "type": "tab",
        "label": "WASC-Switches",
        "disabled": false,
        "info": "Switches\n\n**POSTBOX**\nMonitor the status of the postbox.\nControled by a HomematicIP switch SWDO.\n"
    },
    {
        "id": "9f754c6f.659fc",
        "type": "comment",
        "z": "ff641d00.e7b03",
        "name": "WASC-Switches - Tab Switches, Group Briefkasten; Update @5min",
        "info": "Control the postbox - brief description.\n\nIf the postbox flap is opened, the ui_text node shows state opened with date&time.\n\nThe state can be refreshed or reset after checking the postbox.\nIf reset, the ui_text states closed (“geschlossen”).\n",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "1f1e645d.95a7fc",
        "type": "ui_template",
        "z": "ff641d00.e7b03",
        "group": "69ac96e3.da9d78",
        "name": "Set Group Style",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<style>\n/*\n    For all elements in the group\n*/\n#Briefkasten_Briefkasten_cards {\n    font-size: 20px !important;\n    background-color: \"#FF0000\" !important;\n}\n\n/*\n    For all cardtitles\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    color: #ff0000;\n}\n*/\n\n/* \n    #RaspberryMatic_Dashboard_Hue_cardtitle {\n        font-size: 20px !important;\n        background-color: \"#FF0000\" !important;\n    }\n*/\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 660,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c6fc5ac0.42eb08",
        "type": "inject",
        "z": "ff641d00.e7b03",
        "name": "Request LOW_BAT",
        "topic": "2530",
        "payload": "LOW_BAT",
        "payloadType": "str",
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "79eb3eef.28371"
            ]
        ]
    },
    {
        "id": "bbd06b82.cb9718",
        "type": "ui_text",
        "z": "ff641d00.e7b03",
        "group": "69ac96e3.da9d78",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Postbox LOW_BAT State",
        "label": "Batterie",
        "format": "{{value}}",
        "layout": "row-spread",
        "x": 930,
        "y": 420,
        "wires": []
    },
    {
        "id": "3b6a205f.1ca8a",
        "type": "ui_button",
        "z": "ff641d00.e7b03",
        "name": "Postbox State Reset",
        "group": "69ac96e3.da9d78",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": true,
        "label": "",
        "tooltip": "Status zurücksetzen",
        "color": "",
        "bgcolor": "",
        "icon": "fa-check-circle fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 740,
        "y": 340,
        "wires": [
            [
                "de8ce2c3.0bb8b"
            ]
        ]
    },
    {
        "id": "3e393495.53132c",
        "type": "ui_toast",
        "z": "ff641d00.e7b03",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Notification Postbox State",
        "x": 750,
        "y": 160,
        "wires": []
    },
    {
        "id": "56591167.5daa6",
        "type": "ui_text",
        "z": "ff641d00.e7b03",
        "group": "69ac96e3.da9d78",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Message Postbox State",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "258db4d6.4b7b3c",
        "type": "function",
        "z": "ff641d00.e7b03",
        "name": "Set Messages Postbox",
        "func": "// Set the postbox messages depending state\n// In addition send email with msg.to=receipients;msg.topic=subject;msg.payload=body\nconst DEBUG = global.get(\"debug\");\n// const DEBUG = true;\n\n// Define the postbox OPEN message\n// There are 2 messages 1)Email, 2)UI\n\n// Get state from the http request query\n// Set the flow context as used for mqtt get state request (topic wasc/postbox/get)\nvar state = (msg.req.query.state == \"0\") ? false : true;\nflow.set(\"state\",state);\n// Set the changed time taken from the wasc clock\nvar changed = global.get(\"clock\").datetime;\nflow.set(\"changed\",changed);\nif (DEBUG) node.warn(\"State:\" + state + \",changed:\" + changed + \"#Notificationstate:\" +flow.get(\"notificationstate\"));\n\n// Notify only if not done already by checking flow context notificationstate\nvar msgnotification = {};\nmsgnotification.to = global.get(\"notificationemail\");\n\n// Set mqtttopic prior returning below \nvar msgmqtt = {};\n// msgmqtt.topic = \"wasc/postbox\";\nmsgmqtt.payload = {\"state\":state, \"changed\":changed, \"notificationstate\":flow.get(\"notificationstate\"), \"battery\":flow.get(\"battery\")};\n\n// Messages to return\nmsg.topic = \"Briefkasten\";\n// To update the state must be true and the flag notificationstate must be false\nif (state === true && flow.get(\"notificationstate\") === false) {\n    // Update the flow context\n    flow.set(\"notificationstate\", true);\n    // Set message depending state\n    msg.payload = \"Geöffnet \" + changed;\n    // Email message with action\n    msgnotification.topic = \"Briefkasten: \" + msg.payload;\n    msgnotification.payload = \"Aktion: Status zurücksetzen.\";\n    if (DEBUG) node.warn(\"Email to:\" + msgnotification.to + \",subject:\" + msgnotification.topic + \",body:\" + msgnotification.payload);\n    return [msg,msgnotification,msgmqtt];\n}\n// The postbox is closed if both state & notificationstate are false\nif (state === false && flow.get(\"notificationstate\") === false) {\n    msg.payload = \"Geschlossen\";\n    msgnotification = null;\n    return [msg,msgnotification,msgmqtt];\n}\n\n",
        "outputs": 3,
        "noerr": 0,
        "x": 460,
        "y": 160,
        "wires": [
            [
                "56591167.5daa6"
            ],
            [
                "3e393495.53132c",
                "13ddd0e4.85225f"
            ],
            [
                "59abcf24.f3f9f"
            ]
        ]
    },
    {
        "id": "e2769ffe.7d1778",
        "type": "http response",
        "z": "ff641d00.e7b03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 270,
        "y": 200,
        "wires": []
    },
    {
        "id": "a2ba02f1.2bdb3",
        "type": "http in",
        "z": "ff641d00.e7b03",
        "name": "Listen Postbox Switch",
        "url": "/2530",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "e2769ffe.7d1778",
                "258db4d6.4b7b3c"
            ]
        ]
    },
    {
        "id": "d366824c.0546",
        "type": "inject",
        "z": "ff641d00.e7b03",
        "name": "Inject notificationstate false",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "755b8e09.dd92d"
            ]
        ]
    },
    {
        "id": "755b8e09.dd92d",
        "type": "change",
        "z": "ff641d00.e7b03",
        "name": "Set flow context",
        "rules": [
            {
                "t": "set",
                "p": "notificationstate",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "state",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "changed",
                "pt": "flow",
                "to": "datetime",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "battery",
                "pt": "flow",
                "to": "OK",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "79eb3eef.28371",
        "type": "subflow:aca7a4e9.b87e18",
        "z": "ff641d00.e7b03",
        "name": "Get Device Datapoint",
        "env": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "dd18104a.73927"
            ]
        ]
    },
    {
        "id": "13a64274.95e93e",
        "type": "inject",
        "z": "ff641d00.e7b03",
        "name": "Reset Postbox State @0100.",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "00 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "3b6a205f.1ca8a"
            ]
        ]
    },
    {
        "id": "4fcf9c04.ad1104",
        "type": "e-mail",
        "z": "ff641d00.e7b03",
        "server": "smtp.office365.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "",
        "dname": "Email Postbox State",
        "x": 940,
        "y": 200,
        "wires": []
    },
    {
        "id": "13ddd0e4.85225f",
        "type": "switch",
        "z": "ff641d00.e7b03",
        "name": "Check sent Email",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "null",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 200,
        "wires": [
            [
                "4fcf9c04.ad1104"
            ]
        ]
    },
    {
        "id": "295b14b5.6f4d7c",
        "type": "rfx-detector-in",
        "z": "ff641d00.e7b03",
        "d": true,
        "name": "",
        "port": "31897ac3.21d406",
        "topicSource": "all",
        "topic": "",
        "outputHeartbeats": true,
        "x": 90,
        "y": 1060,
        "wires": [
            [
                "ffa3bf84.da0b4"
            ]
        ]
    },
    {
        "id": "96e505f2.3f7178",
        "type": "rfx-blinds-in",
        "z": "ff641d00.e7b03",
        "name": "",
        "port": "31897ac3.21d406",
        "topicSource": "all",
        "topic": "RFY/0x0E1E1E/2",
        "x": 100,
        "y": 920,
        "wires": [
            [
                "6ad9f177.5834a"
            ]
        ]
    },
    {
        "id": "ffa3bf84.da0b4",
        "type": "debug",
        "z": "ff641d00.e7b03",
        "name": "DEBUG RFXDETECTOR",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 450,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6ad9f177.5834a",
        "type": "debug",
        "z": "ff641d00.e7b03",
        "name": "DEBUG RFXBLINDS",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 460,
        "y": 920,
        "wires": []
    },
    {
        "id": "ebc14517.bcc908",
        "type": "rfx-blinds-out",
        "z": "ff641d00.e7b03",
        "name": "",
        "port": "31897ac3.21d406",
        "topicSource": "msg",
        "topic": "",
        "x": 840,
        "y": 720,
        "wires": []
    },
    {
        "id": "2f358f77.87154",
        "type": "comment",
        "z": "ff641d00.e7b03",
        "name": "Shutter SZ Somfy RTS Pure",
        "info": "",
        "x": 160,
        "y": 560,
        "wires": []
    },
    {
        "id": "32fccc2e.663864",
        "type": "comment",
        "z": "ff641d00.e7b03",
        "name": "Blind WZ Somfy RTS Pure",
        "info": "",
        "x": 150,
        "y": 740,
        "wires": []
    },
    {
        "id": "b616dba2.22e348",
        "type": "comment",
        "z": "ff641d00.e7b03",
        "name": "WASC-Switches - Tab Switches, Group Somfy, No update.",
        "info": "Control the Somfy shutter & blinds.\nUse RTS Pure motors.\n",
        "x": 230,
        "y": 520,
        "wires": []
    },
    {
        "id": "1a986530.3aa7bb",
        "type": "ui_text",
        "z": "ff641d00.e7b03",
        "group": "dc981f76.e9b01",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Rollladen Schlafzimmer",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 450,
        "y": 560,
        "wires": []
    },
    {
        "id": "7c1541a2.c6fb9",
        "type": "ui_button",
        "z": "ff641d00.e7b03",
        "name": "Shutter SZ up",
        "group": "dc981f76.e9b01",
        "order": 2,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-arrow-up fa-2x",
        "payload": "up",
        "payloadType": "str",
        "topic": "",
        "x": 480,
        "y": 640,
        "wires": [
            [
                "6e1d1614.587958"
            ]
        ]
    },
    {
        "id": "59bb2ad.3d048d4",
        "type": "ui_button",
        "z": "ff641d00.e7b03",
        "name": "Shutter SZ down",
        "group": "dc981f76.e9b01",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-arrow-down fa-2x",
        "payload": "down",
        "payloadType": "str",
        "topic": "",
        "x": 470,
        "y": 600,
        "wires": [
            [
                "6e1d1614.587958"
            ]
        ]
    },
    {
        "id": "e9dd80be.a24de",
        "type": "ui_button",
        "z": "ff641d00.e7b03",
        "name": "Shutter SZ stop",
        "group": "dc981f76.e9b01",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "RED",
        "icon": "fa-hand-stop-o fa-2x",
        "payload": "stop",
        "payloadType": "str",
        "topic": "",
        "x": 480,
        "y": 680,
        "wires": [
            [
                "6e1d1614.587958"
            ]
        ]
    },
    {
        "id": "500e32d4.4eb4ec",
        "type": "ui_text",
        "z": "ff641d00.e7b03",
        "group": "dc981f76.e9b01",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Markise Wohnzimmer",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 460,
        "y": 740,
        "wires": []
    },
    {
        "id": "c970958d.811178",
        "type": "ui_button",
        "z": "ff641d00.e7b03",
        "name": "Sunblind WZ up",
        "group": "dc981f76.e9b01",
        "order": 7,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-arrow-down fa-2x",
        "payload": "up",
        "payloadType": "str",
        "topic": "",
        "x": 480,
        "y": 820,
        "wires": [
            [
                "446c4cd2.5dbca4"
            ]
        ]
    },
    {
        "id": "e7245297.82b01",
        "type": "ui_button",
        "z": "ff641d00.e7b03",
        "name": "Sunblind WZ down",
        "group": "dc981f76.e9b01",
        "order": 6,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-arrow-up fa-2x",
        "payload": "down",
        "payloadType": "str",
        "topic": "",
        "x": 470,
        "y": 780,
        "wires": [
            [
                "446c4cd2.5dbca4"
            ]
        ]
    },
    {
        "id": "d014add0.2f442",
        "type": "ui_button",
        "z": "ff641d00.e7b03",
        "name": "Sunblind WZ stop",
        "group": "dc981f76.e9b01",
        "order": 8,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "RED",
        "icon": "fa-hand-stop-o fa-2x",
        "payload": "stop",
        "payloadType": "str",
        "topic": "",
        "x": 470,
        "y": 860,
        "wires": [
            [
                "446c4cd2.5dbca4"
            ]
        ]
    },
    {
        "id": "cda9d6bb.28aa38",
        "type": "comment",
        "z": "ff641d00.e7b03",
        "name": "WASC-Switches - Tab Switches, Group X10 (TODO)",
        "info": "\n\n",
        "x": 210,
        "y": 1000,
        "wires": []
    },
    {
        "id": "dd18104a.73927",
        "type": "function",
        "z": "ff641d00.e7b03",
        "name": "Set LOW_BAT State",
        "func": "// Set LOW_BAT text\nmsg.payload = (msg.payload === false) ? \"Niedrig\" : \"OK\";\n\n// Set flow content\nflow.set(\"battery\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 420,
        "wires": [
            [
                "53901a04.6ea844"
            ]
        ]
    },
    {
        "id": "6e1d1614.587958",
        "type": "change",
        "z": "ff641d00.e7b03",
        "name": "Set Address",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "RFY/0x0E1E1E/2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 640,
        "wires": [
            [
                "ebc14517.bcc908"
            ]
        ]
    },
    {
        "id": "446c4cd2.5dbca4",
        "type": "change",
        "z": "ff641d00.e7b03",
        "name": "Set Address",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "RFY/0x0F1F1F/1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 820,
        "wires": [
            [
                "ebc14517.bcc908"
            ]
        ]
    },
    {
        "id": "48755e72.68f2a",
        "type": "rfx-lights-in",
        "z": "ff641d00.e7b03",
        "d": true,
        "name": "",
        "port": "31897ac3.21d406",
        "topicSource": "all",
        "topic": "",
        "x": 80,
        "y": 1120,
        "wires": [
            [
                "19f5b63a.defe2a"
            ]
        ]
    },
    {
        "id": "19f5b63a.defe2a",
        "type": "debug",
        "z": "ff641d00.e7b03",
        "name": "DEBUG RFXLIGHTS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 460,
        "y": 1120,
        "wires": []
    },
    {
        "id": "59abcf24.f3f9f",
        "type": "mqtt out",
        "z": "ff641d00.e7b03",
        "name": "",
        "topic": "wasc/postbox",
        "qos": "",
        "retain": "",
        "broker": "48368190.9c6bb",
        "x": 720,
        "y": 240,
        "wires": []
    },
    {
        "id": "62b10b1b.348d54",
        "type": "mqtt in",
        "z": "ff641d00.e7b03",
        "name": "",
        "topic": "wasc/postbox/get",
        "qos": "2",
        "datatype": "auto",
        "broker": "48368190.9c6bb",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "b41fb382.87656"
            ]
        ]
    },
    {
        "id": "a3e06f59.0efda",
        "type": "mqtt out",
        "z": "ff641d00.e7b03",
        "name": "",
        "topic": "wasc/postbox",
        "qos": "",
        "retain": "",
        "broker": "48368190.9c6bb",
        "x": 720,
        "y": 460,
        "wires": []
    },
    {
        "id": "b41fb382.87656",
        "type": "function",
        "z": "ff641d00.e7b03",
        "name": "Set MQTT Message",
        "func": "msg.payload = {\n    \"state\":flow.get(\"state\"), \n    \"changed\":flow.get(\"changed\"), \n    \"notificationstate\":flow.get(\"notificationstate\"), \n    \"battery\":flow.get(\"battery\")\n};\n\n// node.warn(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 460,
        "wires": [
            [
                "a3e06f59.0efda"
            ]
        ]
    },
    {
        "id": "de8ce2c3.0bb8b",
        "type": "change",
        "z": "ff641d00.e7b03",
        "name": "Postbox State Reset",
        "rules": [
            {
                "t": "set",
                "p": "req.query.state",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "notificationstate",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 280,
        "wires": [
            [
                "258db4d6.4b7b3c"
            ]
        ]
    },
    {
        "id": "53901a04.6ea844",
        "type": "ui_template",
        "z": "ff641d00.e7b03",
        "group": "1a40c09e.657e3f",
        "name": "Set Label Style",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<!--\nSet the background color & text size of the ui_text label.\n-->\n<style>\n    .nr-dashboard-widget-Batterie {\n        background-color:#404040 !important;\n        font-size: small !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 720,
        "y": 420,
        "wires": [
            [
                "bbd06b82.cb9718"
            ]
        ]
    },
    {
        "id": "69ac96e3.da9d78",
        "type": "ui_group",
        "z": "",
        "name": "Briefkasten",
        "tab": "8b3e80f9.6a7cf",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "31897ac3.21d406",
        "type": "rfxtrx-port",
        "z": "",
        "port": "/dev/ttyUSB-RFX433E-A",
        "enableDebug": false,
        "rfyVenetianMode": "EU"
    },
    {
        "id": "dc981f76.e9b01",
        "type": "ui_group",
        "z": "",
        "name": "Somfy",
        "tab": "8b3e80f9.6a7cf",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "48368190.9c6bb",
        "type": "mqtt-broker",
        "z": "",
        "name": "MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "1a40c09e.657e3f",
        "type": "ui_group",
        "z": "",
        "name": "Heizung",
        "tab": "533dbb59.c3a3a4",
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8b3e80f9.6a7cf",
        "type": "ui_tab",
        "z": "",
        "name": "Schalter",
        "icon": "fa-sliders",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "533dbb59.c3a3a4",
        "type": "ui_tab",
        "z": "",
        "name": "Heizung",
        "icon": "fa-thermometer-half",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]